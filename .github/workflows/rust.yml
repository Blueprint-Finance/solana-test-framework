name: CI

on:
  push:
    branches:
    - '**'
  pull_request:

env:
  SOLANA_VERSION: "1.14.17"
  ANCHOR_VERSION: "0.26.0"
  RUST_TOOLCHAIN: "1.63.0"

jobs:

  validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      # Install Rust
      - name: Cache Cargo registry + index
        uses: actions/cache@v3
        id: cache-cargo
        with:
            path: |
                ~/.cargo/bin/
                ~/.cargo/registry/index/
                ~/.cargo/registry/cache/
                ~/.cargo/git/db/
                ~/.cargo/git/
                target/
            key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.toml') }}
            restore-keys: ${{ runner.os }}-cargo-

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
            override: true
            profile: minimal
            toolchain: ${{ env.RUST_TOOLCHAIN }}
            components: rustfmt, clippy

      # Run build
      - name: Cache build
        uses: Swatinem/rust-cache@v2
      - name: Build program
        run: cargo build
      - name: Run clippy
        run: cargo clippy

  ci:
    runs-on: ubuntu-latest
    needs: [validate]
    steps:
      - uses: actions/checkout@v3

      # Install Rust
      - name: Cache Cargo registry + index
        uses: actions/cache@v3
        id: cache-cargo
        with:
            path: |
                ~/.cargo/bin/
                ~/.cargo/registry/index/
                ~/.cargo/registry/cache/
                ~/.cargo/git/db/
                ~/.cargo/git/
                target/
            key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.toml') }}
            restore-keys: ${{ runner.os }}-cargo-
            
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
            override: true
            profile: minimal
            toolchain: ${{ env.RUST_TOOLCHAIN }}
      - name: Install Linux dependencies
        run: |
            sudo apt-get update
            sudo apt-get install -y pkg-config build-essential libudev-dev libssl-dev gcc-multilib zlib1g-dev llvm clang cmake make libprotobuf-dev protobuf-compiler

      # Install Solana
      - name: Cache Solana binaries
        id: solana-cache
        uses: actions/cache@v3
        with:
            path: |
                ~/.cache/solana
                ~/.local/share/solana/install
                /home/runner/.avm/
                /home/runner/.avm/bin/
            key: ${{ runner.os }}-solana-${{ env.SOLANA_VERSION }}
            restore-keys: |
              ${{ runner.os }}-solana-
      - name: Install Solana
        if: steps.solana-cache.outputs.cache-hit != 'true'
        run: |
            sh -c "$(curl -sSfL https://release.solana.com/v${{ env.SOLANA_VERSION }}/install )"
      - name: Setup Solana Path
        run: |
            echo "$HOME/.local/share/solana/install/active_release/bin" >> $GITHUB_PATH
            export PATH="/home/runner/.local/share/solana/install/active_release/bin:$PATH"
            solana --version
            solana config get
      # Install Yarn
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn config get cacheFolder)"
      - name: Yarn Cache
        uses: actions/cache@v3
        with:
            path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
            key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}
            restore-keys: |
                ${{ runner.os }}-modules-
      # Install Anchor
      - name: Install Anchor
        run: |
            cargo install --git https://github.com/coral-xyz/anchor avm --locked --force
            avm install ${{ env.ANCHOR_VERSION }}
            avm use ${{ env.ANCHOR_VERSION }}
            anchor --version

      
      # Run tets
      - name: Run test
        run: cargo test
      - name: Run test - anchor
        run: cargo test --features anchor
      - name: Run test - pyth
        run: cargo test --features pyth
      - name: Run test - all features
        run: cargo test --all-features 